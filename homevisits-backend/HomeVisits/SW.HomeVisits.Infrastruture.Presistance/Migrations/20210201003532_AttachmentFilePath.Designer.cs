// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SW.HomeVisits.Infrastruture.Data;

namespace SW.HomeVisits.Infrastruture.Presistance.Migrations
{
    [DbContext(typeof(HomeVisitsDomainContext))]
    [Migration("20210201003532_AttachmentFilePath")]
    partial class AttachmentFilePath
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("HomeVisits")
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.AgeSegment", b =>
                {
                    b.Property<Guid>("AgeSegmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AgeFromDay")
                        .HasColumnType("int");

                    b.Property<bool>("AgeFromInclusive")
                        .HasColumnType("bit");

                    b.Property<int>("AgeFromMonth")
                        .HasColumnType("int");

                    b.Property<int>("AgeFromYear")
                        .HasColumnType("int");

                    b.Property<int>("AgeToDay")
                        .HasColumnType("int");

                    b.Property<bool>("AgeToInclusive")
                        .HasColumnType("bit");

                    b.Property<int>("AgeToMonth")
                        .HasColumnType("int");

                    b.Property<int>("AgeToYear")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("NeedExpert")
                        .HasColumnType("bit");

                    b.HasKey("AgeSegmentId");

                    b.HasIndex("ClientId");

                    b.ToTable("AgeSegments","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("VisitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttachmentId");

                    b.HasIndex("VisitId");

                    b.ToTable("Attachments","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Chemist", b =>
                {
                    b.Property<Guid>("ChemistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("DOB")
                        .HasColumnType("int");

                    b.Property<bool>("ExpertChemist")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChemistId");

                    b.ToTable("Chemists","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.ChemistAssignedGeoZone", b =>
                {
                    b.Property<Guid>("ChemistAssignedGeoZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChemistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GeoZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ChemistAssignedGeoZoneId");

                    b.HasIndex("ChemistId");

                    b.HasIndex("GeoZoneId");

                    b.ToTable("ChemistAssignedGeoZones","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.ChemistPermit", b =>
                {
                    b.Property<Guid>("ChemistPermitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChemistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PermitDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ChemistPermitId");

                    b.HasIndex("ChemistId");

                    b.ToTable("ChemistPermits","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.ChemistSchedule", b =>
                {
                    b.Property<Guid>("ChemistScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChemistAssignedGeoZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("StartLangitude")
                        .HasColumnType("real");

                    b.Property<float>("StartLatitude")
                        .HasColumnType("real");

                    b.HasKey("ChemistScheduleId");

                    b.HasIndex("ChemistAssignedGeoZoneId");

                    b.ToTable("ChemistSchedule","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.ChemistScheduleDay", b =>
                {
                    b.Property<Guid>("ChemistScheduleDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChemistScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ChemistScheduleDayId");

                    b.HasIndex("ChemistScheduleId");

                    b.ToTable("ChemistScheduleDays","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.ChemistTrackingLog", b =>
                {
                    b.Property<Guid>("ChemistTrackingLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChemistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceSerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<int>("MobileBatteryPercentage")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ChemistTrackingLogId");

                    b.HasIndex("ChemistId");

                    b.ToTable("ChemistTrackingLog","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("URLName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ClientId");

                    b.HasIndex("CountryId");

                    b.ToTable("Clients","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CountryNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CountryNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MobileNumberLength")
                        .HasColumnType("int");

                    b.HasKey("CountryId");

                    b.HasIndex("ClientId");

                    b.ToTable("Countries","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.GeoZone", b =>
                {
                    b.Property<Guid>("GeoZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GovernateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KmlFilePath")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("MappingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("GeoZoneId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("GovernateId");

                    b.ToTable("GeoZones","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Governate", b =>
                {
                    b.Property<Guid>("GovernateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerServiceEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoverNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GoverNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("GovernateId");

                    b.HasIndex("CountryId");

                    b.ToTable("Governats","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.LostVisitTime", b =>
                {
                    b.Property<Guid>("LostVisitTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("LostTime")
                        .HasColumnType("time");

                    b.Property<Guid>("VisitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LostVisitTimeId");

                    b.HasIndex("VisitId");

                    b.ToTable("LostVisitTime","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MessageAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("Reciever")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.OnHoldVisit", b =>
                {
                    b.Property<Guid>("OnHoldVisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChemistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceSerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<int>("NoOfPatients")
                        .HasColumnType("int");

                    b.Property<Guid>("TimeZoneFrameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OnHoldVisitId");

                    b.HasIndex("ChemistId");

                    b.HasIndex("TimeZoneFrameId");

                    b.ToTable("OnHoldVisits","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DOB")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PatientNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("PatientId");

                    b.HasIndex("ClientId");

                    b.ToTable("Patients","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.PatientAddress", b =>
                {
                    b.Property<Guid>("PatientAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ConfirmedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Flat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GeoZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("PatientAddressId");

                    b.HasIndex("GeoZoneId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAddress","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.PatientPhone", b =>
                {
                    b.Property<Guid>("PatientPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("PatientPhoneId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientPhones","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int>("SystemPageId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId");

                    b.HasIndex("SystemPageId");

                    b.ToTable("Permissions","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.PermissionUsage", b =>
                {
                    b.Property<int>("PermissionUsageId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("Usage")
                        .HasColumnType("int");

                    b.HasKey("PermissionUsageId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionUsages","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Reason", b =>
                {
                    b.Property<int>("ReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("ReasonActionId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitTypeActionId")
                        .HasColumnType("int");

                    b.HasKey("ReasonId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ReasonActionId");

                    b.HasIndex("VisitTypeActionId");

                    b.ToTable("Reasons","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.ReasonAction", b =>
                {
                    b.Property<int>("ReasonActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ReasonActionId");

                    b.ToTable("ReasonActions","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DefaultPageId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("RoleId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DefaultPageId");

                    b.ToTable("Roles","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.RoleGeoZone", b =>
                {
                    b.Property<Guid>("RoleGeoZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GeoZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleGeoZoneId");

                    b.HasIndex("GeoZoneId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGeoZones","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.SystemPage", b =>
                {
                    b.Property<int>("SystemPageId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.HasKey("SystemPageId");

                    b.ToTable("SystemPages","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.SystemParameter", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CallCenterNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DefaultCountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DefaultGovernorateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EstimatedVisitDurationInMin")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOptimizezonebefore")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSendPatientTimeConfirmation")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<int>("NextReserveHomevisitInDay")
                        .HasColumnType("int");

                    b.Property<int?>("OptimizezonebeforeInMin")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PrecautionsFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoutingSlotDurationInMin")
                        .HasColumnType("int");

                    b.Property<string>("VisitApprovalBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VisitCancelBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WhatsappBusinessLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.HasIndex("DefaultCountryId");

                    b.HasIndex("DefaultGovernorateId");

                    b.ToTable("SystemParameters","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.TimeZoneFrame", b =>
                {
                    b.Property<Guid>("TimeZoneFrameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BranchDispatch")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("GeoZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("VisitsNoQouta")
                        .HasColumnType("int");

                    b.HasKey("TimeZoneFrameId");

                    b.HasIndex("GeoZoneId");

                    b.ToTable("TimeZoneFrames","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ClientId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PersonalPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserCreationTypes")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("ClientId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.UserDevice", b =>
                {
                    b.Property<Guid>("UserDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceSerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FireBaseDeviceToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserDeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevices","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.UserGeoZone", b =>
                {
                    b.Property<Guid>("UserGeoZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GeoZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserGeoZoneId");

                    b.HasIndex("GeoZoneId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGeoZones","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Visit", b =>
                {
                    b.Property<Guid>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChemistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("MinMinutes")
                        .HasColumnType("int");

                    b.Property<Guid?>("OriginVisitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlannedNoOfPatients")
                        .HasColumnType("int");

                    b.Property<Guid?>("RelativeAgeSegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequiredTests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SelectBy")
                        .HasColumnType("int");

                    b.Property<Guid>("TimeZoneGeoZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VisitCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<TimeSpan?>("VisitTime")
                        .HasColumnType("time");

                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("VisitId");

                    b.HasIndex("ChemistId");

                    b.HasIndex("OriginVisitId");

                    b.HasIndex("PatientAddressId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RelativeAgeSegmentId");

                    b.HasIndex("TimeZoneGeoZoneId");

                    b.HasIndex("VisitCode")
                        .IsUnique();

                    b.HasIndex("VisitNo")
                        .IsUnique();

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Visits","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.VisitAction", b =>
                {
                    b.Property<Guid>("VisitActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReasonId")
                        .HasColumnType("int");

                    b.Property<int>("VisitActionTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("VisitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VisitActionId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("VisitActionTypeId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitActions","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.VisitActionType", b =>
                {
                    b.Property<int>("VisitActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ActionNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("VisitActionTypeId");

                    b.ToTable("VisitActionType","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.VisitNotification", b =>
                {
                    b.Property<Guid>("VisitNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VisitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VisitNotificationId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitNotifications","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.VisitStatus", b =>
                {
                    b.Property<Guid>("VisitStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ActualNoOfPatients")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceSerialNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsAddressVerified")
                        .HasColumnType("bit");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<int?>("MobileBatteryPercentage")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfTests")
                        .HasColumnType("int");

                    b.Property<int?>("ReasonId")
                        .HasColumnType("int");

                    b.Property<int>("VisitActionTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("VisitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VisitStatusTypeId")
                        .HasColumnType("int");

                    b.HasKey("VisitStatusId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("VisitActionTypeId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitStatusTypeId");

                    b.ToTable("VisitStatus","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.VisitStatusType", b =>
                {
                    b.Property<int>("VisitStatusTypeId")
                        .HasColumnType("int");

                    b.Property<string>("StatusNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("StatusNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("VisitStatusTypeId");

                    b.ToTable("VisitStatusTypes","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.VisitType", b =>
                {
                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TypeNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("VisitTypeId");

                    b.ToTable("VisitType","HomeVisits");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.AgeSegment", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Visit", null)
                        .WithMany("Attachments")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Chemist", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.User", "user")
                        .WithOne("Chemist")
                        .HasForeignKey("SW.HomeVisits.Domain.Entities.Chemist", "ChemistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.ChemistAssignedGeoZone", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Chemist", null)
                        .WithMany("ChemistsGeoZones")
                        .HasForeignKey("ChemistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.GeoZone", "GeoZone")
                        .WithMany()
                        .HasForeignKey("GeoZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.ChemistPermit", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Chemist", null)
                        .WithMany("ChemistPermits")
                        .HasForeignKey("ChemistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.ChemistSchedule", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.ChemistAssignedGeoZone", null)
                        .WithMany("Schedule")
                        .HasForeignKey("ChemistAssignedGeoZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.ChemistScheduleDay", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.ChemistSchedule", null)
                        .WithMany("ScheduleDays")
                        .HasForeignKey("ChemistScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.ChemistTrackingLog", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Chemist", "Chemist")
                        .WithMany()
                        .HasForeignKey("ChemistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Client", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.SystemParameter", null)
                        .WithOne("Client")
                        .HasForeignKey("SW.HomeVisits.Domain.Entities.Client", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Country", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.GeoZone", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Governate", "Governate")
                        .WithMany()
                        .HasForeignKey("GovernateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Governate", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.LostVisitTime", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.OnHoldVisit", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Chemist", "Chemist")
                        .WithMany()
                        .HasForeignKey("ChemistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.TimeZoneFrame", "TimeZoneFrame")
                        .WithMany()
                        .HasForeignKey("TimeZoneFrameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Patient", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.PatientAddress", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.GeoZone", "GeoZone")
                        .WithMany()
                        .HasForeignKey("GeoZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.Patient", null)
                        .WithMany("Addresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.PatientPhone", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Patient", null)
                        .WithMany("Phones")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Permission", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.SystemPage", null)
                        .WithMany("Permissions")
                        .HasForeignKey("SystemPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.PermissionUsage", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Permission", null)
                        .WithMany("PermissionUsages")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Reason", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.ReasonAction", "ReasonAction")
                        .WithMany()
                        .HasForeignKey("ReasonActionId");

                    b.HasOne("SW.HomeVisits.Domain.Entities.VisitActionType", "VisitActionType")
                        .WithMany()
                        .HasForeignKey("VisitTypeActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Role", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("SW.HomeVisits.Domain.Entities.SystemPage", "DefaultPage")
                        .WithMany()
                        .HasForeignKey("DefaultPageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.RoleGeoZone", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.GeoZone", "GeoZone")
                        .WithMany()
                        .HasForeignKey("GeoZoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.Role", null)
                        .WithMany("GeoZones")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.Role", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.SystemParameter", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("DefaultCountryId");

                    b.HasOne("SW.HomeVisits.Domain.Entities.Governate", "Governate")
                        .WithMany()
                        .HasForeignKey("DefaultGovernorateId");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.TimeZoneFrame", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.GeoZone", null)
                        .WithMany("TimeZones")
                        .HasForeignKey("GeoZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.User", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.UserDevice", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.User", null)
                        .WithMany("UserDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.UserGeoZone", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.GeoZone", "GeoZone")
                        .WithMany()
                        .HasForeignKey("GeoZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.User", null)
                        .WithMany("GeoZones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.Visit", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Chemist", "Chemist")
                        .WithMany()
                        .HasForeignKey("ChemistId");

                    b.HasOne("SW.HomeVisits.Domain.Entities.Visit", "OriginVisit")
                        .WithMany()
                        .HasForeignKey("OriginVisitId");

                    b.HasOne("SW.HomeVisits.Domain.Entities.PatientAddress", "PatientAddress")
                        .WithMany()
                        .HasForeignKey("PatientAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.AgeSegment", "RelativeAgeSegment")
                        .WithMany()
                        .HasForeignKey("RelativeAgeSegmentId");

                    b.HasOne("SW.HomeVisits.Domain.Entities.TimeZoneFrame", "timeZoneFrame")
                        .WithMany()
                        .HasForeignKey("TimeZoneGeoZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.VisitType", "VisitType")
                        .WithMany()
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.VisitAction", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId");

                    b.HasOne("SW.HomeVisits.Domain.Entities.VisitActionType", "VisitActionType")
                        .WithMany()
                        .HasForeignKey("VisitActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.Visit", "Visit")
                        .WithMany("VisitActions")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.VisitNotification", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SW.HomeVisits.Domain.Entities.VisitStatus", b =>
                {
                    b.HasOne("SW.HomeVisits.Domain.Entities.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId");

                    b.HasOne("SW.HomeVisits.Domain.Entities.VisitActionType", "VisitActionType")
                        .WithMany()
                        .HasForeignKey("VisitActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.Visit", "Visit")
                        .WithMany("VisitStatuses")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SW.HomeVisits.Domain.Entities.VisitStatusType", "VisitStatusType")
                        .WithMany()
                        .HasForeignKey("VisitStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
